/* Lab Question  (Test 2)
 * 
 * A bottom-up approach is typically used in OOP languages. This is the general design approach that has been used
 * for this software. Do you think it would have been easier or harder to approach this project using a top-down approach?
 * Why do you think a bottom up approach is generally more natural when using OOP languages?
 *
 */

using System;
using System.Collections.Generic;

using Psim.ModelComponents;
using Psim.Materials;

namespace Psim
{
	// Model is comprised of a single material. Hardcoding the time step & number of phonons for now.
	class Model
	{
		private const double TIME_STEP = 5e-12;
		private const int NUM_PHONONS = 10000000;
		private Material material;
		private List<Cell> cells = new List<Cell>(){ };
		private List<Sensor> sensors = new List<Sensor>() { };
		private readonly double highTemp;
		private readonly double lowTemp;
		private readonly double simTime;
		private readonly double tEq;

		public Model(Material material, double highTemp, double lowTemp, double simTime)
		{
			this.material = material;
			this.highTemp = highTemp;
			this.lowTemp = lowTemp;
			this.simTime = simTime;
			tEq = (highTemp + lowTemp) / 2;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="sensorId"></param>
		/// <param name="initTemp"></param>
		public void AddSensor(int sensorId, double initTemp)
        {

			// Check if sensorID already exists in 
			foreach (Sensor sensor in sensors)
			{
				if (sensor.ID == sensorId)
				{
					throw new ArgumentException($"Sensor ID: {sensorId} is not unique");
				}
			}

			sensors.Add(new Sensor(sensorId, material, initTemp));
		}

		public void AddCell(double lenght, double width, int sensorId)
        {
            foreach (Sensor sensor in sensors)
            {
				if(sensor.ID == sensorId)
                {
					cells.Add(new Cell(lenght, width, sensor));
					sensor.AddToArea(cells[cells.Count - 1].Area);

					return;
                }
            }

			throw new ArgumentException($"Sensor ID: {sensorId} does not exist in the model");
        }

		/// <summary>
		/// Manually calls set surfaces for testing
		/// </summary>
		public void CallSetSurfaces()
        {
			SetSurfaces(tEq);
        }

		/// <summary>
		/// Automatically sets all the surfaces in the cells that constitute this model.
		/// Should be called after all the cells have been added
		/// </summary>
		/// <param name="tEq">The equilibrium temperature of the system</param>
		private void SetSurfaces(double tEq)
		{
            int numCells = cells.Count;
            if (numCells < 2)
            {
                throw new InvalidCellCount($"Number of cells is invalid to calculate set surfaces. Current cells are {cells.Count}, minimum cells needed are 2");
            }

            cells[0].SetEmitSurface(SurfaceLocation.left, highTemp);
            cells[0].SetTransitionSurface(SurfaceLocation.right, cells[1]);
            for (int i = 1; i < numCells - 1; ++i)
            {
                cells[i].SetTransitionSurface(SurfaceLocation.left, cells[i - 1]);
                cells[i].SetTransitionSurface(SurfaceLocation.right, cells[i + 1]);
            }
            cells[cells.Count - 1].SetEmitSurface(SurfaceLocation.right, lowTemp);
            cells[cells.Count - 1].SetTransitionSurface(SurfaceLocation.left, cells[numCells - 2]);

		}

		/// <summary>
		/// Calibrates the emitting surfaces in the model.
		/// </summary>
		/// <param name="tEq">System equilibrium temperature</param>
		/// <param name="effEnergy">Phonon packet effective energy</param>
		/// <param name="timeStep">Simulation time step</param>
		private void SetEmitPhonons(double tEq, double effEnergy, double timeStep)
		{
            foreach (Cell cell in cells)
				cell.SetEmitPhonons(tEq, effEnergy, timeStep);
		}

		/// <summary>
		/// Returns the total energy of the model (initial energy + emit energy)
		/// </summary>
		/// <returns>Total energy generated by the model over the course of the simulation</returns>
		private double GetTotalEnergy()
		{
            double emitEnergy = 0;
            foreach (var cell in cells)
                emitEnergy += cell.EmitEnergy(tEq, simTime) + cell.InitEnergy(tEq);
            
			return emitEnergy;
		}

		class InvalidCellCount : Exception
        {
			public InvalidCellCount(string message) : base(String.Format("Invalid Cell Count {0}", message)) {}
        }
	}
}
